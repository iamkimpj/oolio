{
  "version": 3,
  "sources": ["../src/index.ts", "../src/request.ts"],
  "sourcesContent": ["import setRequest from \"./request.js\";\r\nimport type { tpRoute } from \"./request.js\";\r\n\r\ninterface tpRoutes {\r\n  [category: string]: {\r\n    [fnName: string]: tpRoute;\r\n  };\r\n}\r\n\r\ninterface OolioConfig {\r\n  routes: tpRoutes;\r\n  getAuthorizeToken: () => string | null;\r\n  baseUrl: string;\r\n}\r\n\r\nexport default function oolio({\r\n  routes,\r\n  getAuthorizeToken,\r\n  baseUrl,\r\n}: OolioConfig) {\r\n  const api: Record<string, any> = {};\r\n\r\n  (function init(): void {\r\n    if (!routes) {\r\n      logForNoRoutes();\r\n      return;\r\n    } else if (!getAuthorizeToken) {\r\n      logForNoGetAuthorizeToken();\r\n      return;\r\n    }\r\n\r\n    for (const category in routes) {\r\n      if (!api[category]) {\r\n        api[category] = {};\r\n      }\r\n      for (const fnName in routes[category]) {\r\n        api[category][fnName] = (...args: any[]) => {\r\n          const requestFn = setRequest(baseUrl, getAuthorizeToken);\r\n          return requestFn(routes[category][fnName], ...args);\r\n        };\r\n      }\r\n    }\r\n  })();\r\n\r\n  return api;\r\n}\r\n\r\nfunction logForNoRoutes(): void {\r\n  console.warn(`\r\n  [oolio] routes\uAC00 \uC815\uC758\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4. routes\uB294 \uB2E4\uC74C\uACFC \uAC19\uC740 \uD615\uC2DD\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4:\r\n  \r\n  const routes = {\r\n    auth: {\r\n      login: {\r\n        method: 'post',\r\n        path: '/auth/login',\r\n        payload: ['email', 'password']\r\n      },\r\n      register: {\r\n        method: 'post',\r\n        path: '/auth/register',\r\n        payload: ['email', 'password', 'name']\r\n      }\r\n    },\r\n    user: {\r\n      getProfile: {\r\n        method: 'get',\r\n        path: '/user/profile'\r\n      },\r\n      updateProfile: {\r\n        method: 'put',\r\n        path: '/user/profile',\r\n        payload: ['name', 'avatar']\r\n      },\r\n      uploadAvatar: {\r\n        method: 'post',\r\n        path: '/user/avatar',\r\n        payload: ['userId'],\r\n        files: ['avatar']  // \uD30C\uC77C \uC5C5\uB85C\uB4DC \uD544\uB4DC\r\n      }\r\n    }\r\n  };\r\n  \r\n  \uAC01 \uB77C\uC6B0\uD2B8\uB294 \uB2E4\uC74C \uC18D\uC131\uC744 \uAC00\uC9C8 \uC218 \uC788\uC2B5\uB2C8\uB2E4:\r\n  - method: HTTP \uBA54\uC18C\uB4DC (get, post, put, delete \uB4F1)\r\n  - path: API \uC5D4\uB4DC\uD3EC\uC778\uD2B8 \uACBD\uB85C\r\n  - payload: \uC694\uCCAD\uC5D0 \uD3EC\uD568\uB420 \uB370\uC774\uD130 \uD544\uB4DC \uBAA9\uB85D (\uC120\uD0DD\uC0AC\uD56D)\r\n  - authorization: \uC778\uC99D \uD544\uC694 \uC5EC\uBD80 (\uAE30\uBCF8\uAC12: true)\r\n  - files: \uD30C\uC77C \uC5C5\uB85C\uB4DC \uD544\uB4DC \uBAA9\uB85D (\uC120\uD0DD\uC0AC\uD56D)\r\n  `);\r\n}\r\n\r\nfunction logForNoGetAuthorizeToken(): void {\r\n  console.log(\"getAuthorizeToken is undefined\");\r\n}\r\n", "interface PathParams {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface Data {\r\n  [key: string]: any;\r\n}\r\n\r\ninterface Headers {\r\n  [key: string]: string;\r\n}\r\n\r\nexport interface tpRoute {\r\n  method: string;\r\n  path: string;\r\n  payload?: string[];\r\n  baseUrl?: string;\r\n  authorization?: string | boolean;\r\n  files?: string[];\r\n}\r\n\r\ninterface PayloadDefinition {\r\n  defaultValue?: any;\r\n}\r\n\r\nconst hasParams = (path: string): boolean => {\r\n  const paramPattern = /\\/\\{[^}]+\\}/g;\r\n  return paramPattern.test(path);\r\n};\r\n\r\nconst hasFiles = (fileIndex?: string[]): boolean => {\r\n  if (!fileIndex) return false;\r\n  return fileIndex.length > 0;\r\n};\r\n\r\nconst convQueryParamsForGet = (\r\n  payload: string[] | { [key: string]: PayloadDefinition } = [],\r\n  data: Data = {}\r\n): Data => {\r\n  const query: Data = {};\r\n  if (Array.isArray(payload)) {\r\n    for (const key in data) {\r\n      if (payload.indexOf(key) !== -1) {\r\n        query[key] =\r\n          data[key] === undefined || data[key] === null\r\n            ? \"\"\r\n            : typeof data[key] === \"object\"\r\n            ? JSON.stringify(data[key])\r\n            : data[key];\r\n      }\r\n    }\r\n  } else {\r\n    for (const key in payload) {\r\n      if (data[key] !== undefined) {\r\n        query[key] =\r\n          data[key] == null\r\n            ? \"\"\r\n            : typeof data[key] === \"object\"\r\n            ? JSON.stringify(data[key])\r\n            : data[key];\r\n      } else {\r\n        const definition = payload[key];\r\n        if (definition) {\r\n          query[key] = definition.defaultValue;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return query;\r\n};\r\n\r\nconst getBodyFromDataWithFile = (\r\n  payload: string[] = [],\r\n  fileIndex: string[] = [],\r\n  data: Data = {}\r\n): FormData => {\r\n  const formData = new FormData();\r\n  const filteredData = convQueryParamsForGet(payload, data);\r\n\r\n  // payload\uC5D0 \uD3EC\uD568\uB41C \uD544\uB4DC \uCC98\uB9AC\r\n  for (const key in filteredData) {\r\n    const encodedKey = encodeURIComponent(key);\r\n    const encodedValue = encodeURIComponent(filteredData[key]);\r\n    formData.append(encodedKey, encodedValue);\r\n  }\r\n\r\n  // files\uC5D0 \uD3EC\uD568\uB41C \uD544\uB4DC \uCC98\uB9AC\r\n  for (const key in data) {\r\n    if (fileIndex.includes(key)) {\r\n      formData.append(key, data[key]);\r\n    }\r\n  }\r\n\r\n  return formData;\r\n};\r\n\r\nconst getBodyFromData = (payload: string[] = [], data: Data = {}): FormData => {\r\n  const filteredData = convQueryParamsForGet(payload, data);\r\n  const formData = new FormData();\r\n\r\n  for (const key in filteredData) {\r\n    formData.append(key, filteredData[key]);\r\n  }\r\n  return formData;\r\n};\r\n\r\nconst setPath = (path: string, pathParams: PathParams = {}): string => {\r\n  if (!path) {\r\n    console.log(\"path is undefined\");\r\n    return path;\r\n  }\r\n\r\n  // \uACBD\uB85C \uD30C\uB77C\uBBF8\uD130\uAC00 \uC788\uB294\uC9C0 \uD655\uC778\r\n  if (!hasParams(path)) {\r\n    return path;\r\n  }\r\n\r\n  // \uAC01 \uACBD\uB85C \uD30C\uB77C\uBBF8\uD130\uB97C \uC2E4\uC81C \uAC12\uC73C\uB85C \uCE58\uD658\r\n  let modifiedPath = path;\r\n  for (const [key, value] of Object.entries(pathParams)) {\r\n    const paramPattern = new RegExp(`\\\\{${key}\\\\}`, \"g\");\r\n    modifiedPath = modifiedPath.replace(paramPattern, value);\r\n  }\r\n\r\n  return modifiedPath;\r\n};\r\n\r\nconst runGetApi = async (\r\n  url: string,\r\n  payload: string[],\r\n  queryParams: Data = {},\r\n  headers: Headers = {}\r\n): Promise<any> => {\r\n  const query = convQueryParamsForGet(payload, queryParams);\r\n\r\n  const response = await fetch(\r\n    `${url}?${new URLSearchParams(query).toString()}`,\r\n    {\r\n      headers,\r\n    }\r\n  );\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw {\r\n      status: response.status,\r\n      statusText: response.statusText,\r\n      data: error,\r\n    };\r\n  }\r\n  return response.json();\r\n};\r\n\r\nconst runApi = async (\r\n  url: string,\r\n  method: string,\r\n  payload: string[],\r\n  data: Data = {},\r\n  headers: Headers = {}\r\n): Promise<any> => {\r\n  const body = getBodyFromData(payload, data);\r\n  const response = await fetch(url, {\r\n    method,\r\n    headers,\r\n    body,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw {\r\n      status: response.status,\r\n      statusText: response.statusText,\r\n      data: error,\r\n    };\r\n  }\r\n  return response.json();\r\n};\r\n\r\nconst runApiWithFiles = async (\r\n  url: string,\r\n  method: string,\r\n  payload: string[],\r\n  fileIndex: string[] = [],\r\n  data: Data = {},\r\n  headers: Headers = {}\r\n): Promise<any> => {\r\n  const body = getBodyFromDataWithFile(payload, fileIndex, data);\r\n\r\n  if (!headers[\"Content-Type\"]) {\r\n    headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\r\n  }\r\n\r\n  const response = await fetch(url, {\r\n    method,\r\n    headers,\r\n    body,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw {\r\n      status: response.status,\r\n      statusText: response.statusText,\r\n      data: error,\r\n    };\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport default (_baseUrl: string, getAuthorizeToken: () => string | null) => {\r\n  return async (\r\n    route: tpRoute,\r\n    pathParams: PathParams = {},\r\n    data: Data | null = null,\r\n    headers: Headers = {}\r\n  ): Promise<any> => {\r\n    const {\r\n      method,\r\n      path,\r\n      payload = [],\r\n      baseUrl = null,\r\n      authorization = null,\r\n      files = undefined,\r\n    } = route;\r\n\r\n    let url = baseUrl ? baseUrl : _baseUrl ? _baseUrl : \"http://localhost:3000\";\r\n    let requestData = data || {};\r\n\r\n    if (hasParams(path)) {\r\n      url = url + setPath(path, pathParams);\r\n    } else {\r\n      url = url + path;\r\n      if (!data) {\r\n        requestData = pathParams;\r\n      }\r\n    }\r\n\r\n    if (authorization !== \"guest\" && getAuthorizeToken) {\r\n      const token = await getAuthorizeToken();\r\n      if (token) {\r\n        headers.Authorization = `Bearer ${token}`;\r\n      }\r\n    }\r\n\r\n    if (method === \"get\") {\r\n      return runGetApi(url, payload, requestData, headers);\r\n    } else if (hasFiles(files)) {\r\n      return runApiWithFiles(url, method, payload, files, requestData, headers);\r\n    } else {\r\n      return runApi(url, method, payload, requestData, headers);\r\n    }\r\n  };\r\n};\r\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "oolio", "__toCommonJS", "hasParams", "path", "hasFiles", "fileIndex", "convQueryParamsForGet", "payload", "data", "query", "key", "definition", "getBodyFromDataWithFile", "formData", "filteredData", "encodedKey", "encodedValue", "getBodyFromData", "setPath", "pathParams", "modifiedPath", "value", "paramPattern", "runGetApi", "url", "queryParams", "headers", "response", "error", "runApi", "method", "body", "runApiWithFiles", "request_default", "_baseUrl", "getAuthorizeToken", "route", "baseUrl", "authorization", "files", "requestData", "token", "oolio", "routes", "getAuthorizeToken", "baseUrl", "api", "logForNoGetAuthorizeToken", "logForNoRoutes", "category", "fnName", "args", "request_default"]
}
